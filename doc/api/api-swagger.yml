openapi: 3.0.0
info:
  description: |
    This is the Prophecy Api documentation
  version: dev
  title: "Prophecy Api"

tags:
  - name: account
    description: Everything about the user's account
  - name: armies
    description: Everything about the armies
  - name: prophecies
    description: Everything about the prophecies
  - name: games
    description: Everything about the games
  - name: armies-lists
    description: Everything about the armies lists


paths:

  # ACCOUNT

  /sign-in:
    post:
      summary: Enables the user to sign in
      description: "**Request body:**\n\nThe *username* field can either be the username or the email address."
      tags:
        - account
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signInCredentials'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionResponse'
        400:
          description: Bad Request
        401:
          description: |
            Unauthorized 
            
            The email address and/or the password is/are invalid
        500:
          description: Inernal Server Error (unable to connect to the database)

  /sign-up:
    post:
      summary: Enables the user to create an account
      description: "Sends a email confirmation link and doesn't sign in the user"
      tags:
        - account
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signUpCredentials'
      responses:
        201:
          description: Account created
        400:
          description: Bad Request
        409:
          description: Conflict (the email address is already in use)
        500:
          description: Internal Server Error (unable to connect to the database)

  /sign-out:
    post:
      summary: Enables the user to logout
      description: ""
      tags:
        - account
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      responses:
        200:
          description: OK
        400:
          description: Bad Request
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        500:
          description: Internal Server Error

  /account/email/send-verification-link:
    get:
      summary: Sends an email confirmation link
      description: ""
      tags:
        - account
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      responses:
        200:
          description: OK
        400:
          description: Bad Request
        404:
          description: Not found
        500:
          description: Internal Server Error


  # ARMIES LISTS

  # create
  /armies-lists:
    post:
      summary: Creates a new army list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/armyListObject'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid'
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'

    get:
      summary: Retrieves the user's armies list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - in: query
          name: tagId
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: The armies lists' ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/armyListCreadentials'
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'

  /armies-lists/{listId}:
    get:
      summary: Retrieves an army list data
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/listId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArmyListWithId'
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'

    put:
      summary: Updates an army list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/listId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/armyListObject'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'

    delete:
      summary: Deletes an army list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/listId'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'


  # PROPHECIES

  # read
  /prophecies/units:
    post:
      summary: Retrieves a unit prophecy for the user
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/prophecyRequest'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prophecyObject'
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
    get:
      summary: Retrieves the prophecies history
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/prophecyObject'
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'

  /prophecies/units/{prophecyId}:
    delete:
      summary: Deletes a prophecy
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: "#/components/parametersSchemes/prophecyId"
      responses:
        200:
          description: OK
        400:
          description: No id provided
        401:
          description: The user is not authenticated
        403:
          description: The user tries to access data that is not his
        404:
          description: The prophecy was not found

  /prophecies/armies:
    post:
      summary: Requests an army vs army prophecy
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/armyProphecyRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/armyProphecyDTO'
    get:
      summary: Retieves the history
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/armyProphecyDTO'

  /prophecies/armies/{prophecyId}:
    delete:
      summary: Deletes a prophecy
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: "#/components/parametersSchemes/prophecyId"
      responses:
        200:
          description: OK
        400:
          description: No id provided
        401:
          description: The user is not authenticated
        403:
          description: The user tries to access data that is not his
        404:
          description: The prophecy was not found


  # GAMES

  # create
  /games:
    post:
      summary: Creates a new game
      description: ""
      tags:
        - games
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gameObject'
      responses:
        201:
          description: Created
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          description: An element was not found (army list, opponent, ...)
    # read
    get:
      summary: Retrieves the user's games list
      description: ""
      tags:
        - games
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - in: query
          name: win
          description: The user won the game
          schema:
            type: boolean
        - in: query
          name: listId
          description: The army list's id
          schema:
            $ref: '#/components/schemas/uuid'
        - in: query
          name: opponentId
          description: The opponent's id
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'

  # update
  #  /games/update-game/{gameId}:
  #    put:
  #      summary: Updates a game
  #      description: ""
  #      tags:
  #        - games
  #      security:
  #        - bearerAuth: []
  #      parameters:
  #        - $ref: '#/components/parametersSchemes/authorization'
  #        - $ref: '#/components/parametersSchemes/gameId'
  #      requestBody:
  #        required: true
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/gameObject'
  #      responses:
  #        200:
  #          description: OK
  #        401:
  #          $ref: '#/components/schemas/unauthorizedResponse'
  #        404:
  #          $ref: '#/components/schemas/notFoundResponse'

  # delete
  /games/{gameId}:
    delete:
      summary: Deletes a game
      description: ""
      tags:
        - games
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/gameId'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'

  # SETTINGS

  # update
  /account/password:
    put:
      summary: Updates the user's password
      description: ""
      tags:
        - account
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/password'
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        500:
          description: Internal Server Error


  /account/username:
    put:
      summary: Updates the user's username
      description: ""
      tags:
        - account

      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
        400:
          description: Bad Request
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        500:
          description: Internal Server Error (unable to connect to the database)

  /account/email:
    put:
      summary: Updates the user's email address
      description: ""
      tags:
        - account
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email'
      responses:
        200:
          description: OK
        400:
          description: Bad Request
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        409:
          description: Conflict (email address already in use)
        422:
          description: Unporcessable Entity (invalid email address)
        500:
          description: Internal Server Error (unable to connect to the database)

  # delete
  /account:
    get:
      summary: Retrieves the account's data
      description: ""
      tags:
        - account
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string

        401:
          description: Unauthorized
    delete:
      summary: Deletes the user's account
      description: ""
      tags:
        - account
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      responses:
        200:
          description: OK
        400:
          description: Bad Request
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        500:
          description: Internal Server Error


  # ARMIES

  # read
  /armies:
    get:
      summary: Retrieves the armies ids
      description: ""
      tags:
        - armies
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/armyCredentials'
        401:
          $ref: '#/components/schemas/unauthorizedResponse'
        404:
          $ref: '#/components/schemas/notFoundResponse'
        500:
          description: Internal Server Error

  /armies/{armyId}:
    get:
      summary: Retrieves an army's data
      description: ""
      tags:
        - armies
      parameters:
        - $ref: "#/components/parametersSchemes/armyId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/armyObject'

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Victoire-Rabeau/Prophecy/dev
  - description: Prophecy's server
    url: https://prophecy-eip.com
    variables:
      basePath:
        default: /api

components:
  schemas:

    password:
      type: string
      description: The user's password (length up to 72 bytes)
      example: password

    username:
      type: string
      description: The user's username
      example: username

    email:
      type: string
      description: The user's email address
      example: email@address.com

    description:
      type: string
      example: This is a description.

    signInCredentials:
      description: Informations required to sign in
      type: object
      properties:
        username:
          description: "username or email address"
        password:
          $ref: '#/components/schemas/password'
      required:
        - email
        - password

    signUpCredentials:
      description: Informations required to sign up
      type: object
      properties:
        username:
          $ref: '#/components/schemas/username'
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
      required:
        - username
        - email
        - password

    connectionResponse:
      description: The data sent on connection
      properties:
        access_token:
          type: string
          description: The required token
        username:
          type: string
          description: The user's id
          format: string
          example: "username"
      required:
        - accessToken
        - userId

    uuid:
      type: string
      format: uuid

    uuidArray:
      type: array
      items:
        $ref: '#/components/schemas/uuid'

    length:
      type: integer
      # format: uint
      example: 42


    unitObject:
      description: A unit's data
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        unitCategoryId:
          type: number
        principalOrganisationId:
          type: number
        minSize:
          type: number
        maxSize:
          type: number
        canBeGeneralAndBsb:
          type: boolean
        position:
          type: number
        magic:
          type: string
        notes:
          type: string
        isMount:
          type: boolean
        unitTypeId:
          type: number
        armyOrganisationId:
          type: number
        valuePoints:
          type: number
        addValuePoints:
          type: number
        characteristics:
          $ref: "#/components/schemas/unitCharacteristics"
        troops:
          type: array
          items:
            $ref: "#/components/schemas/troop"
        specialRuleUnitTroops:
          type: array
          items:
            $ref: "#/components/schemas/specialRuleUnitTroop"
        equipmentUnitTroops:
          type: array
          items:
            $ref: "#/components/schemas/equipmentUnitTroop"
        unitOptions:
          type: array
          items:
            $ref: "#/components/schemas/unitOption"

    unitOption:
      type: object
      properties:
        id:
          type: number
        unitId:
          type: number
        parentId:
          type: number
        category:
          type: string
        magicItemFactor:
          type: number
        armyOrganisationActivatorId:
          type: number
        armyOrganisationDesactivatorId:
          type: number
        useAllActivators:
          type: boolean
        armyOrganisationId:
          type: number
        isPerModel:
          type: boolean
        isFootOnly:
          type: boolean
        mountId:
          type: number
        mountAdnCharacteristicsPoints:
          type: boolean
        organisationMode:
          type: string
        isMultiple:
          type: boolean
        isRequired:
          type: boolean
        domainMagicId:
          type: number
        magicItemSource:
          type: string
        organisationId:
          type: number
        name:
          type: string
        valuePoints:
          type: number
        usePoints:
          type: string
        max:
          type: number
        hasChoices:
          type: boolean
        weight:
          type: number
        changeProfile:
          type: boolean
        base:
          type: string
        height:
          type: string
        enchantmentLimit:
          type: number
        unitOptionLimits:
          type: string
        availabilities:
          type: string
        unitOptionChangeSpecialRules:
          type: string
        unitOptionChangeEquipments:
          type: string
        unitOptionChangeProfiles:
          type: string
        equipments:
          type: array
          items:
            $ref: "#/components/schemas/equipment"
        magicItemCategories:
          type: array
          items:
            $ref: "#/components/schemas/magicItemCategory"

    equipmentUnitTroop:
      type: object
      properties:
        id:
          type: string
        unitId:
          type: number
        troopId:
          type: number
        info:
          type: string
        equipmentId:
          type: number
        typeLvl:
          type: string
        name:
          type: string

    specialRuleUnitTroop:
      type: object
      properties:
        unitId:
          type: number
        troopId:
          type: number
        infos:
          type: string
        specialRuleId:
          type: number
        typeLvl:
          type: string
        name:
          type: string


    unitCharacteristics:
      type: object
      properties:
        type:
          type: string
        base:
          type: string
        height:
          type: string
        unitTypeId:
          type: string
        adv:
          type: string
        mar:
          type: string
        dis:
          type: string
        evoked:
          type: string
        hp:
          type: string
        def:
          type: string
        res:
          type: string
        arm:
          type: string
        aeg:
          type: string

    troop:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        characteristics:
          $ref: '#/components/schemas/troopCharacteristics'

    troopCharacteristics:
      type: object
      properties:
        M:
          type: string
        WS:
          type: string
        BS:
          type: string
        S:
          type: string
        T:
          type: string
        W:
          type: string
        I:
          type: string
        A:
          type: string
        LD:
          type: string
        E:
          type: string
        type:
          type: string
        size:
          type: number
        att:
          type: string
        of:
          type: string
        str:
          type: string
        ap:
          type: string
        agi:
          type: string
        type_id:
          type: string
        type_name:
          type: string


    armyOrganisation:
      description: The army's organisation
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        isDefault:
          type: boolean
        organisationGroups:
          type: array
          items:
            $ref: '#/components/schemas/armyOrganisationGroup'
        # $ref: '#/components/schemas/unitCategory'

    armyOrganisationGroup:
      type: object
      properties:
        id:
          type: number
        armyOrganisationId:
          type: number
        name:
          type: string
        organisationGroupLimits:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              army_organisation_group_id:
                type: number
              points_min:
                type: number
              points_max:
                type: number
              target:
                type: string
              value:
                type: number
              repeat_interval:
                type: number
              repeat_value:
                type: number
        organisationUnitLimits:
          type: array
          items:
            properties:
              id:
                type: number
              unit_min:
                type: number
              unit_max:
                type: number
              model_max:
                type: number
              unit_ids:
                type: array
                items:
                  type: number
              availabilities:
                type: array
                items:
                  type: number
        changeLimits:
          type: string

    armyObject:
      description: The army's data
      type: object
      properties:
        id:
          type: number
        name:
          allOf:
            - description: The army's name
            - $ref: '#/components/schemas/name'
        version:
          type: number
        categoryId:
          type: number
        source:
          type: string
        equipmentLimits:
          type: string
        specialRuleLimits:
          type: string
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/armyOrganisation'
        magicItemCategories:
          type: array
          items:
            $ref: '#/components/schemas/magicItemCategory'
        magicItems:
          type: array
          items:
            $ref: '#/components/schemas/magicItem'
        magicStandards:
          type: array
          items:
            $ref: '#/components/schemas/magicStandard'
        equipments:
          type: array
          items:
            $ref: '#/components/schemas/equipment'
        units:
          type: array
          items:
            $ref: '#/components/schemas/unitObject' # TODO
        specialRules:
          type: array
          items:
            $ref: '#/components/schemas/specialRuleObject'
      required:
        - name
        - id
        - rules
        - unitCategories
        - units
        - upgradeCategories
        - upgrades
        - specialIemCategories
        - options

    magicItemCategory:
      type: object
      properties:
        id:
          type: number
        name:
          $ref: "#/components/schemas/name"
        isMultiple:
          type: boolean
        versionId:
          type: number
        max:
          type: number

    equipment:
      type: object
      properties:
        id:
          type: number
        versionId:
          type: number
        name:
          type: string
        description:
          type: string
        typeLvl:
          type: string
        canBeEnchanted:
          type: boolean
        equipmentCategories:
          type: array
          items:
            $ref: "#/components/schemas/equipmentCategory"

    equipmentCategory:
      type: object
      properties:
        id:
          type: number
        versionId:
          type: number
        name:
          type: string

    magicItem:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        magicItemCategoryId:
          type: number
        isMultiple:
          type: boolean
        max:
          type: number
        isDominant:
          type: boolean
        versionId:
          type: number
        valuePoints:
          type: number
        footOnly:
          type: boolean
        disableMagicPathLimit:
          type: boolean
        wizardOnly:
          type: array
          items:
            type: string
        requiredOrganisationIds:
          type: array
          items:
            type: number

    magicStandard:
      type: object
      properties:
        id:
          type: number
        versionId:
          type: number
        name:
          type: string
        description:
          type: string
        isMultiple:
          type: boolean
        infos:
          type: string
        valuePoint:
          type: number
        max:
          type: number
        availabilities:
          type: array
          items:
            type: string


    specialRuleObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/uuid"
        name:
          $ref: "#/components/schemas/name"
        description:
          $ref: "#/components/schemas/description"
        typeLvl:
          type: string



    armyCredentials:
      type: object
      properties:
        id:
          type: number
        name:
          $ref: '#/components/schemas/name'

    ArmyListWithId:
      type: object
      properties:
        id:
          type: string
        name:
          allOf:
            - description: The list's name
            - $ref: '#/components/schemas/name'
        valuePoints:
          description: The list's cost
          type: number
          example: 500
        armyId:
          allOf:
            - description: The army's id
            - type: number
        units:
          description: The list's units
          type: array
          items:
            $ref: "#/components/schemas/armyListUnit"
        isShared:
          type: boolean
        isFavorite:
          type: boolean

    armyListObject:
      description: An army list data
      type: object
      properties:
        name:
          allOf:
            - description: The list's name
            - $ref: '#/components/schemas/name'
        valuePoints:
          description: The list's cost
          type: number
          example: 500
        armyId:
          allOf:
            - description: The army's id
            - type: number
        units:
          description: The list's units
          type: array
          items:
            $ref: "#/components/schemas/armyListUnit"
        isShared:
          type: boolean
        isFavorite:
          type: boolean
      required:
        - name
        - cost
        - armyId
        - units
        - isShared
        - isFavorite

    armyListUnit:
      type: object
      properties:
        unitId:
          type: number
        quantity:
          type: number
        formation:
          type: string
          example: "5x2"
        troopIds:
          type: array
          items:
            type: number
        magicItems:
          type: array
          items:
            $ref: "#/components/schemas/armyListMagicItem"
        magicStandards:
          type: array
          items:
            $ref: "#/components/schemas/armyListMagicStandard"
        options:
          type: array
          items:
            $ref: "#/components/schemas/armyListOption"
        specialRuleTroops:
          type: array
          items:
            $ref: "#/components/schemas/armyListSpecialRuleTroop"
        equipmentTroops:
          type: array
          items:
            $ref: "#/components/schemas/armyListEquipmentTroop"


    armyListMagicItem:
      type: object
      properties:
        unitId:
          type: number
        magicItemId:
          type: number
        equipmentId:
          type: number
        quantity:
          type: number
        valuePoints:
          type: number

    armyListMagicStandard:
      type: object
      properties:
        magicStandardId:
          type: number
        unitOptionId:
          type: number
        quantity:
          type: number
        valuePoints:
          type: number

    armyListOption:
      type: object
      properties:
        unitId:
          type: number
        optionId:
          type: number
        quantity:
          type: number
        valuePoints:
          type: number

    armyListSpecialRuleTroop:
      type: object
      properties:
        troopId:
          type: number
        ruleId:
          type: number

    armyListEquipmentTroop:
      type: object
      properties:
        troopId:
          type: number
        equipmentId:
          type: number

    gameObject:
      description: A game's data
      type: object
      properties:
        opponent:
          allOf:
            - description: The opponent's user id (can be null)
            - $ref: '#/components/schemas/uuid'
        ownerArmyListId:
          allOf:
            - description: The player's army list's id (can be null)
            - $ref: '#/components/schemas/uuid'
        opponentArmyListId:
          allOf:
            - description: The opponents's army list's id (can be null)
            - $ref: '#/components/schemas/uuid'
        ownerScore:
          description: The player's score
          type: number
          example: 15
        opponentScore:
          description: The opponent's score
          type: number
          example: 5
      required:
        - playersArmy
        - opponentsArmy
        - playerSocre
        - opponentsScore

    prophecyRequest:
      description: A prophecy request data
      type: object
      properties:
        attackingPosition:
          $ref: "#/components/schemas/prophecyUnitAttackingPosition"
        attackingRegiment:
          $ref: "#/components/schemas/armyListUnit"
        defendingRegiment:
          $ref: "#/components/schemas/armyListUnit"

    prophecyUnitAttackingPosition:
      enum: ["front", "back", "flank"]


    prophecyObject:
      description: A prophecy data
      type: object
      properties:
        attackingPosition:
          $ref: "#/components/schemas/prophecyUnitAttackingPosition"
        attackingRegiment:
          $ref: "#/components/schemas/armyListUnit"
        defendingRegiment:
          $ref: "#/components/schemas/armyListUnit"
        bestCase:
          $ref: "#/components/schemas/prophecyUnitCase"
        meanCase:
          $ref: "#/components/schemas/prophecyUnitCase"
        worstCase:
          $ref: "#/components/schemas/prophecyUnitCase"

      required:
        - playersArmy
        - opponentsArmy
        - playersScore
        - opponentsScore

    prophecyUnitCase:
      type: object
      properties:
        attackingRegiment:
          $ref: "#/components/schemas/prophecyUnitRegiment"
        defendingRegiment:
          $ref: "#/components/schemas/prophecyUnitRegiment"
        occurenceProbability:
          type: number


    prophecyUnitRegiment:
      type: object
      properties:
        nbRows:
          type: number
        nbCols:
          type: number
        nbModels:
          type: number
        points:
          type: number

    prophecyUnitModel:
      type: object
      properties:
        stats:
          $ref: "#/components/schemas/prophecyUnitModel"
        modifiers:
          type: array
          items:
            $ref: "#/components/schemas/prophecyUnitModifier"

    prophecyUnitModifier:
      type: object
      properties:
        stats:
          $ref: "#/components/schemas/prophecyUnitModel"
        bonus:
          type: boolean
        nbDice:
          type: number
        requirements:
          example: []

    prophecyUnitModelStats:
      type: object
      properties:
        advance:
          type: number
        march:
          type: number
        discipline:
          type: number
        healthPoint:
          type: number
        defense:
          type: number
        resilience:
          type: number
        armour:
          type: number
        aegis:
          type: number
        attack:
          type: number
        offensive:
          type: number
        strength:
          type: number
        armourPenetration:
          type: number
        agility:
          type: number

    armyListCreadentials:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          $ref: '#/components/schemas/name'
        armyId:
          type: number
        valuePoints:
          type: number
        isShared:
          type: boolean
          example: true
        isFavorite:
          type: boolean

    armyProphecyRequest:
      type: object
      properties:
        armyList1:
          $ref: '#/components/schemas/uuid'
        armyList2:
          $ref: '#/components/schemas/uuid'

    armyProphecyDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        armyList1:
          $ref: '#/components/schemas/uuid'
        armyList2:
          $ref: '#/components/schemas/uuid'
        player1Score:
          type: number
        player2Score:
          type: number


    # RESPONSES

    unauthorizedResponse:
      description: |
        Unauthorized
        
        The token is not valid

    forbiddenResponse:
      description: |
        Forbidden
        
        The user does'nt have the rights to access/update the data

    notFoundResponse:
      description: |
        Not found
        
        The requested data can't be found

    unsuportedResponse:
      description: Unsuported Media Type


  securitySchemes:

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parametersSchemes:

    authorization:
      in: header
      name: Authorization
      description: The authorization bearer token
      required: true
      schema:
        $ref: '#/components/securitySchemes/bearerAuth'

    eventId:
      in: path
      name: eventId
      description: The event's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    listId:
      in: path
      name: listId
      description: The list's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    prophecyId:
      in: path
      name: prophecyId
      description: The prophecy's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    gameId:
      in: path
      name: gameId
      description: The game's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    teamId:
      in: path
      name: teamId
      description: The team's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    messageId:
      in: path
      name: messageId
      description: The message's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    userId:
      in: path
      name: userId
      description: The user's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    armyId:
      in: path
      name: armyId
      description: The army's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    modifierId:
      in: path
      name: modifierId
      description: The modifier's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    unitId:
      in: path
      name: unitId
      description: The unit's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    locationId:
      in: path
      name: locationId
      description: The location's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    tagId:
      in: path
      name: tagId
      description: The tag's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    postId:
      in: path
      name: postId
      description: The post's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    statisticId:
      in: path
      name: statisticId
      description: The statistic's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    emailAddress:
      in: path
      name: emailAddress
      description: The user's email address
      required: true
      schema:
        $ref: '#/components/schemas/email'

    id:
      in: path
      name: id
      description: The request's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    hash:
      in: path
      name: hash
      description: The request's hash
      required: true
      schema:
        $ref: '#/components/schemas/uuid'



# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /Victoire-Rabeau/Prophecy/dev
schemes:
  - https
