openapi: 3.0.0
info:
  description: |
    This is the Prophecy Api documentation
  version: 1.0.0
  title: "Prophecy Api"
#  host: "localhost" # TODO: change
#  basePath: /api
  

tags:
  - name: account
    description: Everything about the user's account
  - name: events
    description: Everything about the events
  - name: armies
    description: Everything about the armies
  - name: prophecies
    description: Everything about the prophecies
  - name: statistics
    description: Everything about the statistics
  - name: settings
    description: Everything about the settings
  - name: users
    description: Everything about the users
  - name: units
    description: Everything about the units
  - name: teams
    description: Everything about the teams
  - name: locations
    description: Everything about the locations
  - name: armies-lists
    description: Everything about the armies lists
  - name: spells
    description: Everything about the spells
  - name: rules
    description: Everything about the armies rules
  - name: items
    description: Everything about the armies items
  - name: organisation
    description: Everything about the armies organisation


paths:

# ACCOUNT 

  /account/sign-in:
    post:
      summary: Enables the user to sign in
      description: ""
      tags: 
        - account
      parameters: []
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signInCredentials'
      responses:
        200:
          description: Data received on connection success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionResponse'
                
        # TODO: complete
        
  /account/sign-up:
    put:
      summary: Enables the user to create an account
      description: ""
      tags: 
        - account
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signUpCredentials'
      responses:
        200:
          description: Data received on connection success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionResponse'
        # TODO: complete
      
  /account/sign-out:
    post:
      summary: Enables the user to logout
      description: ""
      tags:
        - account
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: add parameters
      responses:
        200:
          description: OK
        # TODO: complete

  # EVENTS

  # create
  /events/create-event:
    post:
      summary: Creates a new event
      description: ""
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: add parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventObject'
      tags:
        - events
      responses:
        200: 
          description: New event's id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid'
        # TODO: complete
        
  /events/save-event/{eventId}:
    put:
      summary: Saves an event for the user
      description: ""
      tags:
        - events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/eventId'
      responses: 
        200:
          description: OK
        # TODO: complete

  # read
  /events/get-events:
    get:
      summary: Retrieves the events list
      description: ""
      tags:
        - events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        #TODO: complete (add tags ?, locations ?)
      responses:
        200: 
          description: An array of events id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        # TODO: complete
        
  /events/get-event/{eventId}:
    get:
      summary: Retrieves an event data
      description: ""
      tags:
        - events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/eventId'
        # TODO: complete
      responses:
        200:
          description: An event object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventObject'
        # TODO: complete

  /events/get-saved-events:
    get:
      summary: Retrieves the saved events list
      description: ""
      tags:
        - events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete (add tags ? locations ? ... in query)
      responses: 
        200:
          description: List of events ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        # TODO: complete

  # update
  /event/update-event/{eventId}:
    put:
      summary: Updates an event's informations
      description: ""
      tags:
        - events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/eventId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventObject'
      responses:
        200:
          description: OK
        # TODO: complete
        
  /events/unsave-event/{eventId}:
    put:
      summary: Unsaves an event for the user
      description: ""
      tags:
        - events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/eventId'
      responses:
        200:
          description: OK
        # TODO: complete

  # delete
  /events/delete-event/{eventId}:
    delete:
      summary: Deletes an event
      description: ""
      tags:
        - events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/eventId'
      responses:
        200:
          description: OK
        # TODO: complete


  # ARMIES LISTS

  # create
  /armies-lists/create-list:
    post:
      summary: Creates a new army list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        # TODO
      responses:
        200:
          description: Army's id
        # TODO: complete

  # read
  /armies-lists/get-armies-lists:
    get:
      summary: Retrieves the user's armies list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete (add tags ? ... in query)
      responses:
        200:
          description: The armies lists' ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        # TODO: complete

  /armies-lists/get-list/{listId}:
    get:
      summary: Retrieves an army list data
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/listId'
        # TODO
      responses:
        # TODO: complete


  # update
  /armies-lists/update-list/{listId}:
    put:
      summary: Updates an army list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/listId'
        # TODO
      responses:
        200:
          description: OK
        # TODO
      
  # delete

  /armies-lists/delete-list/{listId}:
    delete:
      summary: Deletes an army list
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/listId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete

  # ARMIES LISTS TAGS

  # create
  /armies-lists/tags/create-tag:
    post:
      summary: Creates an army tag
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete

  # read
  /armies-lists/tags/get-tags:
    get:
      summary: Retrieves the user's armies lists tags list
      description: ""
      tags: 
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete (add tags ? ... in query)
      responses:
        # TODO: complete

  /armies-lists/tag/get-tag/{tagId}:
    get:
      summary: Retrieves a tag data
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete
      
  # update
  /armies-lists/tag/update-tag/{tagId}:
    put:
      summary: Updates an army list tag
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses: 
        200:
          description: OK
        # TODO: complete

  # delete
  /armies-lists/tag/delete-tag/{tagId}:
    delete:
      summary: Deletes an army list tag
      description: ""
      tags:
        - armies-lists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete


  # PROPHECIES

  # read
  /prophecies/get-prophecy:
    get:
      summary: Retrieves a prophecy for the user
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete

  /prophecies/get-history:
    get:
      summary: Retrieves the prophecies histrory
      description: ""
      tags:
        - prophecies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete


  # STATISTICS

  # create
  /statistics/create-statistic:
    post:
      summary: Creates a new statistic
      description: ""
      tags:
        - statistics
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        200:
          description: OK
         # TODO: complete
      
  # read
  /statistics/get-statistics:
    get:
      summary: Retrieves the user's statistics list
      description: ""
      tags:
        - statistics
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete
        
  /statistics/get-statistic/{statisticId}:
    get:
      summary: Retrieves a statistic data
      description: ""
      tags:
        - statistics
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/statisticId'
        # TODO: complete
      responses:
        # TODO: complete

  # update    
  /statistics/update-statistic/{statisticId}:
    put:
      summary: Updates a statistic
      description: ""
      tags:
        - statistics
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/statisticId'
      responses:
        200:
          description: OK
        # TODO: complete
      
  # delete
  /statistics/delete-statistic/{statisticId}:
    delete:
      summary: Deletes a statistic
      description: ""
      tags:
        - statistics
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/statisticId'
      responses:
        200:
          description: OK
        # TODO: complete


  # SETTINGS

  # update
  /account/settings/update-password:
    put:
      summary: Updates the user's password
      description: ""
      tags:
        - account
        - settings
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/password'
      responses:
        200:
          description: OK
        # TODO: complete

  /account/settings/update-username:
    put:
      summary: Updates the user's username
      description: ""
      tags:
        - account
        - settings
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/username'
      responses:
        200:
          description: OK
        # TODO: complete

  /account/settings/update-profile-picture: # maybe in profile ?
    put:
      summary: Updates the user's profile picture
      description: ""
      tags:
        - account
        - settings
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO
      requestBody: # TODO
        required: true
      responses:
        200:
          description: OK
        # TODO: complete

  /account/settings/update-email-address:
    put:
      summary: Updates the user's email address
      description: ""
      tags:
        - account
        - settings
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email'
      responses:
        200:
          description: OK
        # TODO: complete

  # delete
  /account/settings/delete-account:
    delete:
      summary: Deletes the user's account
      description: ""
      tags:
        - account
        - settings
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO
      responses:
        200: 
          description: OK
        # TODO: complete
      
      
  # TEAMS

  # create
  /teams/create-team:
    post:
      summary: Creates a new team
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamObject'
      responses:
        200:
          description: The team's id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid'
        # TODO: complete
        
  /teams/{teamId}/create-message:
    put:
      summary: Creates a new message in the team
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
        - $ref: '#/components/parametersSchemes/teamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/messageObject' # credentials
      responses:  
        200:
          description: The message's id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid'
        # TODO: complete  
      
  # read
  /teams/get-teams:
    get:
      summary: Retrieves the user's teams list
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete

  /teams/get-team/{teamId}:
    get:
      summary: Retrieves a team's data
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        # TODO: complete
      responses:
        # TODO: complete
        
  /teams/{teamId}/get-messages:
    get:
      summary: Retrieves the team's messages
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        # TODO: complete
      responses:
        # TODO: complete
        
  # update
  /teams/rename-team/{teamId}:
    put:
      summary: Renames a team
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        # TODO: compelte
      responses:
        200:
          description: OK
        # TODO: complete
        
  /teams/{teamId}/update-message/{messageId}:
    put:
      summary: Updates a team's message
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        - $ref: '#/components/parametersSchemes/messageId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete

  /teams/{teamId}/invite-user/{userId}:
    put:
      summary: Invites a user in a team
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete
      
  /teams/{teamId}/respond-to-invitation:
    put:
      summary: Sends a response to a team invitation
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        # TODO
      responses:
        200:
          description: OK
        # TODO
          
    # delete
  /teams/delete-team/{teamId}:
    delete:
      summary: Deletes a team
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete
      
  /teams/{teamId}/delete-message/{messageId}:
    delete:
      summary: Deletes a team's message
      description: ""
      tags:
        - teams
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/teamId'
        - $ref: '#/components/parametersSchemes/messageId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete


# ARMIES
  
  # create
  # /armies/create-army: 
  #   post:
  #     summary: Creates a new army
  #     description: ""
  #     tags:
  #       - armies
  #     parameters: []
  #       # TODO
  #     responses:
  #       # TODO

  # read
  /armies/get-armies:
    get:
      summary: Retrieves the armies ids
      description: ""
      tags:
        - armies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO
      responses:
        200:
          description: The armies ids list
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/uuidArray'
        # TODO: complete
  
  /armies/{armyId}/get-name:
    get:
      summary: Retrieves the army's name
      description: ""
      tags:
        - armies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
      responses:
        200:
          description: The army's name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/name'
          # TODO
  
  # update
  # /armies/update-army/{armyId}:
  #   put:
  #     summary: Updates an army data
  #     description: ""
  #     tags:
  #       - armies
  #     parameters: []
  #       # TODO
  #     responses:
  #       # TODO
  
  # delete
  # /armies/delete-army/{armyId}:
  #   delete:
  #     summary: Deletes an army 
  #     description: ""
  #     tags:
  #       - armies
  #     parameters: []
  #       # TODO
  #     responses:
  #       # TODO

  # UNITS

  # create
  # /armies/{armyId}/units/create-unit:
  #   post:
  #     summary: Creates a unit
  #     description: ""
  #     tags:
  #       - armies
  #       - units
  #     parameter: []
  #       # TODO
  #     responses:
  #       # TODO

  # read
  /armies/{armyId}/units/get-units:
    get:
      summary: Retrieves the army's units list
      description: ""
      tags:
        - armies
        - units
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
        - $ref: '#/components/parametersSchemes/armyId'
      responses:
        200:
          description: The units ids list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        # TODO: compete

  /armies/{armyId}/units/get-unit/{unitId}:
    get:
      summary: Retrieves a unit data
      description: ""
      tags:
        - armies
        - units
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        - $ref: '#/components/parametersSchemes/unitId'
      responses:
        200:
          description: The unit's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unitObject'
        # TODO: complete

  # update
  # /armies/{armiyId}/units/update-unit/{unitId}:
  #   put:
  #     summary: Updates a unit
  #     description: ""
  #     tags:
  #       - armies
  #       - units
  #     parameters: []
  #       # TODO
  #     responses:
  #       # TODO

  # delete
  # /armies/{armyId}/units/delete-unit/{unitId}:
  #   delete:
  #     summary: Deletes a unit
  #     description: ""
  #     tags:
  #       - armies
  #       - units
  #     parameters: []
  #       # TODO
  #     responses:
  #       # TODO


# SPELLS
  
  # create
  
  # read
  /armies/{armyId}/spells/get-spells:
    get:
      summary: Retrieves the army's spells ids list
      description: ""
      tags:
        - armies
        - spells
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
        - $ref: '#/components/parametersSchemes/armyId'
      responses:
        200:
          description: The spells ids
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/uuidArray' 
        # TODO: complete
        
  /armies/{armyId}/spells/get-spell/{spellId}:
    get:
      summary: Retrieves the spell's data
      description: ""
      tags:
        - armies
        - spells
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
       # TODO: complet
        - $ref: '#/components/parametersSchemes/armyId'
        - in: path
          name: spellId
          description: The spell's id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: The spell's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/spellObject'
        # TODO: complete
      
  # update
  
  # delete

# RULES
  
  # create
  
  # read
  /armies/{armyId}/rules/get-rules:
    get:
      summary: Retrieves the army's rules
      description: ""
      tags:
        - armies
        - rules
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        # TODO: complete
      responses:
        200:
          description: The army's rules ids list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        # TODO: complete
  
  /armies/{armyId}/rules/get-rule/{ruleId}:
    get:
      summary: Retrieves the rule's data
      description: ""
      tags:
        - armies
        - rules
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        - in: path
          name: ruleId
          description: The rule's id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        # TODO: complete
      responses:
        200: 
          description: The rule's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleObject'
        # TODO
  
  # update
  
  # delete

# ITEMS
  # create
  
  # read
  /armies/{armyId}/items/get-items:
    get:
      summary: Retrieves the army's items
      description: ""
      tags:
        - armies
        - items
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        # TODO: complete
      responses:
        200:
          description: The army's items ids list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        # TODO: complete
    
  /armies/{armyId}/items/get-item/{itemId}:
    get:
      summary: Retrieves the item's data
      description: ""
      tags:
        - armies
        - items
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        - in: path
          name: itemId
          description: The item's id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        # TODO: complete
      responses:
        200:
          description: The item's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itemObject'
        # TODO
  
  # update
  
  # delete


# ORGANISATION

  # create
  
  # read
  /armies/{armyId}/get-organisation:
    get:
      summary: Retrieves the army's organisation
      description: ""
      tags:
        - armies
        - organisation
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        # TODO: complete
      responses:
        # TODO: complete
  
  # update
  
  # delete
  
  
# USERS

  # create

  # read
  /users/get-users:
    get:
      summary: Retrieves a users list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses: 
        # TODO: complete
        
  /users/get-user/{userId}:
    get:
      summary: Retrieves a user data
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        # TODO: complete
        
  /users/get-blocked-users:
    get:
      summary: Retrieves the blocked users list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete
        
  /users/{userId}/profile/statistics/get-shared-statistics:
    put:
      summary: Retrieves the list of shared statistics
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        # TODO: complete
        
  /users/{userId}/profile/armies/get-shared-armies:
    get:
      summary: Retrieves the shared armies list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        # TODO: complete
      
  /users/{userId}/profile/pictures/get-shared-pictures:
    get:
      summary: Retreves the shared pictures list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        # TODO: complete
      
  /users/profile/pictures/get-sared-picture/{pictureId}:
    get:
      summary: Retrieves a shared picture data
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        # TODO: complete

  /users/{userId}/profile/followers/get-followers:
    get:
      summary: Retrieves a user followers list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        # TODO: complete
    
  /users/{userId}/profile/followers/get-followed-users:
    get:
      summary: Retrieves the followed users list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        # TODO: complete
        
  #update
  /users/follow-user/{userId}:
    put:
      summary: Follows a user
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete

  /users/unfollow-user/{userId}:
    put:
      summary: Unfollows a user
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        200: 
          description: OK
        # TODO: complete

  /users/block-user/{userId}:
    put:
      summary: Blocks a user
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete

  /users/unblock-user/{userId}:
    put:
      summary: Unblocks a user
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/userId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete

  /users/profile/statistics/share-statistic/{statisticId}:
    put:
      summary: Shares a statistic
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/statisticId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete

  /users/profile/statistics/unshare-statistic/{statisticId}:
    put:
      summary: Unshares a statistic
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/statisticId'
        # TODO: complete
      responses:
        200: 
          description: OK
        # TODO: complete
        

  /users/profile/armies/share-army/{armyId}:
    put:
      summary: Shares an army list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO

  /users/profile/armies/unshare-army/{armyId}:
    put:
      summary: Unshares an army list
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/armyId'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete

  /users/profile/pictures/share-picture:
    put:
      summary: Shares a picture
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO

  /users/profile/pictures/unshare-picture/{pictureId}:
    delete:
      summary: Unshares a picture
      description: ""
      tags:
        - users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      responses:
        200:
          description: OK
        # TODO: complete


  # LOCATIONS

  # create
  /locations/create-location:
    post:
      summary: Creates a location
      description: ""
      tags:
        - locations
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/locationObject'
      responses:
        200:
          description: The location's id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid'
        # TODO: complete

  # read
  /locations/get-locations:
    get:
      summary: Retrieves a locations list
      description: ""
      tags:
        - locations
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        # TODO: complete
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listRequest'
      responses:
        200:
          description: The locations ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidArray'
        # TODO: complete
        
  /locations/get-location/{locationId}:
    get:
      summary: Retrieves a location information
      description: ""
      tags:
        - locations
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/locationId'
      responses:
        200:
          description: The location's data
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/locationObject'
        # TODO: complete

  # update
  /locations/update-location/{locationId}:
    put:
      summary: Updates a location data
      description: ""
      tags:
        - locations
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/locationId'
      responses:
        200:
          description: OK
        # TODO: complete

  # delete
  /locations/delete-location/{locationId}:
    delete:
      summary: Deletes a location
      description: ""
      tags:
        - locations
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parametersSchemes/authorization'
        - $ref: '#/components/parametersSchemes/locationId'
      responses:
        200:
          description: OK
        # TODO: complete
  


# Added by API Auto Mocking Plugin
# host: virtserver.swaggerhub.com
# basePath: /Victoire-Rabeau/Prophecy/1.0.0
# schemes:
# - https
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Victoire-Rabeau/Prophecy/1.0.0

components:
  schemas:
    
    password:
      type: string
      description: The user's password
      example: password
      
    username:
      type: string
      description: The user's username
      example: username
      
    email:
      type: string
      description: The user's email address
      example: email@address.com
      
    description:
      type: string
      example: This is a description.
  
    signInCredentials:
      description: Informations required to sign in
      type: object
      properties:
        username:
          $ref: '#/components/schemas/username'
        password:
          $ref: '#/components/schemas/password'
      required:
        - username
        - password
        
    signUpCredentials:
      description: Informations required to sign up
      type: object
      properties:
        username:
          $ref: '#/components/schemas/username'
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
      required:
        - username
        - email
        - password
        
    connectionResponse:
      description: The data sent on connection
      properties:
        accessToken:
          type: string
          description: The required token
        userId:
          type: string
          description: The user's id
          format: uuid
      required:
        - accessToken
        - userId
        
    uuid:
      type: string
      format: uuid
        
    uuidArray:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
        
    length:
      type: integer
      # format: uint
      example: 42
      
    date:
      type: string
      format: date
      example: DD-MM-YYYY
      
    time:
      type: string
      format: time
      example: HH-MM-SS
      
    link:
      type: string
      format: link
      example: www.link.com
      
    name:
      type: string
      example: name
      
    tag:
      type: string
      example: tag
    
    size:
      type: object
      properties:
        x:
          type: number
          example: 25
        y: 
          type: number
          example: 25
          
    limit:
      type: object
      properties:
        type:
          description: The limit's type
          type: string
          enum: ["Min", "Max", "No limit"]
        value:
          description: The limit's value in percent
          type: number
          example: 42
      
    listRequest:
      description: Data requested on a list
      properties:
        length:
          $ref: '#/components/schemas/length'
        flags:
          type: array
          items:
            type: string
            example: flag1
            
    eventObject:
      description: Event data
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        description:
          $ref: '#/components/schemas/description'
        tag:
          $ref: '#/components/schemas/tag'
        date:
          $ref: '#/components/schemas/date'
        time:
          $ref: '#/components/schemas/time'
        link:
          $ref: '#/components/schemas/link'
        locationId:
          $ref: '#/components/schemas/uuid'
      required:
        - name
        - description
        - tag
        - date
        - time
        - locationId
        
    locationObject:
      description: Location data
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        description:
          $ref: '#/components/schemas/description'
        number:
          # name: number
          # definitions: The street's number
          $ref: '#/components/schemas/length'
        street:
          description: The street's name
          type: string
          example: "Rue Pasteur"
        city:
          description: A city name
          type: string
          example: Le Kremlin-Bicêtre
        postalCode:
          description: The city's postal code
          type: number
          example: 94270
        country:
          description: The coutry's name
          type: string
          example: France
  
    teamCredentials:
      description: A team's credentials
      type: object
      properties: 
        name: 
          $ref: '#/components/schemas/name'
        desription: 
          $ref: '#/components/schemas/description'
          
    teamObject:
      description: A team's data
      type: object
      properties:
        name: 
          $ref: '#/components/schemas/name'
        description: 
          $ref: '#/components/schemas/description'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/messageObject'
        members:
          $ref: '#/components/schemas/uuidArray'
          
    messageObject:
      description: A message's data
      type: object
      properties:
        authorId:
          $ref: '#/components/schemas/uuid'
        message:
          type: string
          example: This is a message
        date:
          $ref: '#/components/schemas/date'
        time:
          $ref: '#/components/schemas/time'
    
    unitGlobalStatistics: # TODO
      description: The unit's global statistics
      type: object
      properties:
        adv:
          description: 'Advance Rate: The distance the model can Advance Move in inches'
          type: number
          example: 5
        mar:
          description: 'March Rate: The distance the model can March Move in inches'
          type: number
          example: 10
        dis:
          description: 'Discipline: The model’s ability to stand and fight'
          type: number
          example: 9
        modelRules:
    
    unitDefensiveStatistics: # TODO
      description: The unit's defensive statistics
      type: object
      properties:
        hp:
          description: 'Health Points: When the model loses this many Health Points, it is removed as a casualty'
          type: number
          example: 3
        def:
          description: 'Defensive Skill: How well the model avoids being hit in melee'
          type: number
          example: 6
        res:
          description: 'Resilience: How easily the model withstands blows'
          type: number
          example: 5
        arm:
          description: 'Armour: The innate Armour of the model'
          type: number
          example: 0
    
    unitOffensiveStatistics: # TODO
      description: The unit's offensive statistics
      type: object
      properties:
        att:
          description: 'Attack Value: The number of times the model part can strike in a Round of Combat'
          type: number
          example:
        off:
          description: 'Offensive Skill: How good the model part is at scoring hits in melee'
          type: number
          example:
        str:
          description: 'Strength: How easily the model part can wound enemy models'
          type: number
          example:
        ap:
          description: 'Armour Penetration: How well the model part can penetrate the Armour of enemy models'
          type: number
          example:
        agi:
          description: 'Agility: Model parts with a higher Agility strike first in melee'
          type: number
          example:
        
    unitHeader:
      description: The header of a unit entry usually contains all the general information on the unit 
      type: object
      properties:
        name:
          description: This is the name of the unit that will be used e.g. when choosing the unit to perform an action like Charging, or when targeting the unit with a spell or a Shooting Attack
          type: string
          example:
        armyCategories: # TODO
          description: Every unit is part of an Army Category, like Characters, Core, or Special, which is important e.g. for building an army or for certain Model Rules
          type: array
          example:
        size: # TODO
          description: The unit size tells you the minimum and the maximum size of the unit when building an army. The minimum unit size corresponds to the number of models that the unit must contain at least. And accordingly, the maximum unit size represents the number of models that the unit can consist of at the most
          type:
          example:
        cost: # TODO
          description: The unit cost tells you how many points you have to pay for adding the unit to your army in its minimum size, and how many points each additional model will cost. For some units in the game, an additional model will cost the same amount of points as a model that is part of the unit’s minimum size, while for others additional models may be more or less expensive than the initial models.
          type:
          example:
        scoring: # TODO
          description: Some units have a certain Model Rule called Scoring, which is relevant for winning Secondary Objectives during the game
          type:
          example:
        cap: # TODO
          description: Certain units can only be selected a limited number of times in an army. In this case, you will find a “0–X Units/Army” cap in the unit entry
          type:
          example:
        specifications: # TODO
          description: Every model in the game has a specific Height, Type, and base size, which are relevant for a wide variety of game mechanics and Model Rules
          # type: object
          properties:
            height:
              description: The unit's height
              type:
              example:
            type:
              description: The unit's type
              type:
              example:
            base:
              allOf:
                - description: The model's base size
                - $ref: '#/components/schemas/size'
    
    unitCharacteristicProfiles:
      description: The Characteristic Profiles of each unit entry contain the values of all of a unit’s Global, Defensive, and Offensive Characteristics
      type: object
      properties:
        global: # TODO: make map (see multipart models)
          $ref: '#/components/schemas/unitGlobalStatistics'
        defensive: # TODO: make map (see multipart models)
          $ref: '#/components/schemas/unitDefensiveStatistics'
        offensive: # TODO: make map (see multipart models)
          $ref: '#/components/schemas/unitOffensiveStatistics'
    
    unitModelRules: # TODO
      description: In this part of the unit entry, the unit’s Model Rules are displayed
      type: object
      properties:
        global:
        
        defensive:
        
        offensive:
        
    unitOptions: # TODO
      description:
      type: object
      properties:
        commandGroupOptions:
          description:
          type:
          example:
        unrestrictedOptions:
          description:
          type:
          example:
        restrictedOptions:
          description:
          type:
          example:
        modelRules:
          description:
          type:
          example:
        magicOptions:
          description:
          type:
          example:
        mountOptions:
          description:
      #type:
       #   example:
    
    unitCategory:
      description: A unit category data
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        limit:
          description: The unit category's limit
          type: object
          properties:
            type:
              description: The limit's type
              type: string
              enum: ["Min", "Max", "No limit"]
            value:
              description: The limit's value in percent
              type: number
              example: 42
              
    unitObject:
      description: A unit's data
      type: object
      properties:
        header:
          $ref: '#/components/schemas/unitHeader'
        characteristicProfiles:
          $ref: '#/components/schemas/unitCharacteristicProfiles'
        modelRules:
           $ref: '#/components/schemas/unitModelRules'
        options:
          $ref: '#/components/schemas/unitOptions'
    
    spellObject:
      description: A spell data
      type: object
      properties:
        classification:
          description: Spells are classified into the different categories Learned Spells, Attribute Spells, and Hereditary Spells by letters or numbers
          type: string
          example: 1
        name:
          description: The spell's name
          type: string
          example: Water Jet
        castingValue:
          description: The Casting Value is the minimum value you need to reach to succeed a Casting Attempt
          type: number
          example: 4
        range: 
          description: The spell's range in inches
          type: number
          example: 36
        type:
          description: The spell type describes how the spell’s targets have to be chosen
          type: array
          items: 
            type: string
          example: ["Damage", "Hex", "Missile"]
        duration:
          description: The duration of a spell determines how long the effects of the spell are applied
          type: string
          example: Instant
        effect:
          description: The effect of a spell defines what happens to the target of the spell when the spell is successfully cast
          type: string
          example: The target suffers D6 hits with Strength 4, Armour Penetration 0, and Magical Attacks
    
    ruleObject:
      description: A rule data
      type: object
      properties:
        category:
          description: The rule's category
          type: string
          example: category
        name:
          $ref: '#/components/schemas/name'
        description:
          allOf:
            - description: The rule's description
            - $ref: '#/components/schemas/description'
        options:
          type: array
          items:
            type: object
            properties:
              name:
                description: THhe description's name
                type: string
                example: name
              description:
                allOf:
                  - description: The option's description
                  - $ref: '#/components/schemas/description'
    itemObject:
      description: An item's data
      type: object
      properties:
        category:
          description: The item's category
          type: string
          example: category
        name:
          allOf:
            - description: The item's name
            - $ref: '#/components/schemas/name'
        cost:
          description: The item's points cost
          type: number
          example: 42
        modelRestriction:
          description: The item's models restriction
          type: string
          example: Models without Ambush only.
        enchantment:
          
      
    armyOrganisation:
      description: The army's organisation
      type: array
      items:
        type: object
        properties:
          name:
            allOf:
              - description: The organisation's name
              - $ref: '#/components/schemas/name'
          limit:
            allOf:
              - description: The category's limit
              - $ref: '#/components/schemas/limit'

    armyObject:
      description: The army's data
      type: object
      properties:
        name:
          allOf:
            - description: The army's name
            - $ref: '#/components/schemas/name'
        rules:
          allOf:
            - description: The army's rules ids list
            - $ref: '#/components/schemas/uuidArray'
        spells:
          allOf:
            - description: The army's spells ids list
            - $ref: '#/components/schemas/uuidArray'
        items:
          allOf:
            - description: The army's items ids list
            - $ref: '#/components/schemas/uuidArray'
        organisation:
          allOf:
            - description: The army's organisation
            - $ref: '#/components/schemas/armyOrganisation'
        units:
          allOf:
            - description: The army's units ids list
            - $ref: '#/components/schemas/uuidArray'
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      # in: header
  
  parametersSchemes:
    authorization:
      in: header
      name: Authorization
      description: The authorization bearer token
      required: true
      schema: 
        $ref: '#/components/securitySchemes/bearerAuth'
    
    eventId:
      in: path
      name: eventId
      description: The event's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    
    listId:
      in: path
      name: listId
      description: The list's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    
    statisticId:
      in: path
      name: statisticId
      description: The statistic's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    
    teamId:
      in: path
      name: teamId
      description: The team's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
        
    messageId:
      in: path
      name: messageId
      description: The message's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
        
    userId:
      in: path
      name: userId
      description: The user's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
        
    armyId:
      in: path
      name: armyId
      description: The army's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
        
    unitId:
      in: path
      name: unitId
      description: The unit's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    
    locationId:
      in: path
      name: locationId
      description: The location's id
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
      

#security:
 # - bearerAuth: []